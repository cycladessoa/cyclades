/*******************************************************************************
 * Copyright (c) 2012, THE BOARD OF TRUSTEES OF THE LELAND STANFORD JUNIOR UNIVERSITY
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *    Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *    Neither the name of the STANFORD UNIVERSITY nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'

apply from: 'tasks.gradle'
apply from: 'cyclades_java_client_dsl.gradle'
apply from: 'cyclades_java_client_servicebroker_targets.gradle'

version = nyxlet_NYXLET_NAME_version + '.' + build_number
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
group = 'PACKAGE_NAME'
archivesBaseName = 'NYXLET_NAME'

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
               name 'Cyclades Nyxlet for Log'
               packaging 'jar'
               description 'Log Nyxlet used within Cyclades'
               url 'http://github.com/cycladessoa'
               scm {
                   url 'scm:git@github.com:cycladessoa/cyclades.git'
                   connection 'scm:git@github.com:cycladessoa/cyclades.git'
                   developerConnection 'scm:git@github.com:cycladessoa/cyclades.git'
               }
               licenses {
                   license {
                       name 'BSD License, Version 3.0'
                       url 'http://www.w3.org/Consortium/Legal/2008/03-bsd-license.html'
                       distribution 'repo'
                   }
               }
               developers {
                   developer {
                       id 'cycladessoa'
                       name 'Cyclades SOA'
                   }
                   developer {
                       id 'cyclades-tangel'
                       name 'Tom Angelopoulos'
                   }
                   developer {
                       id 'cycladessoa-cthai'
                       name 'Charleston Thai'
                   }
               }
           }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

jar.enabled = true
artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}
signArchives.onlyIf { ext.isReleaseVersion }

jar {
    // save the extension as *.nyxlet
    extension = 'nyxlet'
    dependsOn classes
    from { configurations.newConf.collect { it.isDirectory() ? it : zipTree(it) }}
}

jar.doFirst() {
    List<String> listKey = new ArrayList<String>()
    List<String> listValue = new ArrayList<String>()
    configurations.runtime.each { f->
        RelativePath rp = RelativePath.parse(true, "$f")
        String[] pathParts = rp.getSegments()
        listKey.add(pathParts[pathParts.size() - 5])
        listValue.add(pathParts[pathParts.size() - 1])
    }
    configurations.newConf.each { f->
        RelativePath rp = RelativePath.parse(true, "$f")
        String[] pathParts = rp.getSegments()
        listKey.add(pathParts[pathParts.size() - 5])
        listValue.add(pathParts[pathParts.size() - 1])
    }
    manifest {
        attributes 'Main-Class': 'PACKAGE_NAME.NYXLET_NAME.Main'
        attributes 'Provider': "Cyclades SOA"
        attributes 'Extension-Name': archivesBaseName
        attributes 'Implementation-Title': "Gradle"
        attributes 'Implementation-Vendor-Id': "CycladesSOA"
        attributes 'Implementation-Version': version
        attributes 'Built-With': 'gradle-' + GradleVersion.current()
        attributes 'Built-By': System.getProperty("user.name")

        Map dynamicAttributes = new HashMap()
        String key;
        for (int i = 0; i < listKey.size(); i++) {
            key = listKey.get(i)
            //println "key: " + key + " value: " + listValue.get(i)
            //address issue with tomcat where the attribute key cannot contain . in it
            if (key.contains('.'))  {
                key = key.replaceAll('\\.', '-')
            }
            dynamicAttributes.put(key, listValue.get(i))
        }
        attributes(dynamicAttributes)
   }
}

jar.doLast() {
    javaexec {
        main = 'org.cyclades.engine.nyxlet.BuildNyxletManifest'
        classpath = sourceSets.main.runtimeClasspath
        args = ['-q', jar.archivePath]
    }
    ant.delete(file: "${buildDir}/libs/"+archivesBaseName+".nyxlet")
    copy {
        from "${buildDir}/libs"
        into "${buildDir}/libs"
        rename('(.*)-(.*).nyxlet', '$1.nyxlet')
    }
}

compileJava.options.compilerArgs = ['-Xlint:deprecation -Xlint:unchecked']
compileTestJava.options.compilerArgs = ['-Xlint:deprecation -Xlint:unchecked']

sourceSets.main.resources.srcDir 'conf'

configurations {
   newConf
}

dependencies {
    // Cyclades Engine required dependencies --- NO NOT MODIFIED ---
    compile group: 'junit', name: 'junit', version: '4.8.2'
    compile group: 'servletapi', name: 'servlet-api', version: '2.4'
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: '5.5'
    compile group: 'org.json', name: 'json', version: '20090211'        //JSON.jar
    compile group: 'commons-digester', name: 'commons-digester', version: '1.4.1'   //commons-digester.jar
    compile group: 'commons-logging', name: 'commons-logging-api', version: '1.1'   //commons-logging-api.jar
    compile group: 'log4j', name: 'log4j', version: '1.2.16'    //log4j.jar
    compile group: 'com.google.guava', name: 'guava', version: '10.0.1' //guava-10.0.1.jar
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.4.4'    //javax.mail-1.4.4.jar
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.3' //commons-bean-utils.jar
    compile group: 'commons-lang', name: 'commons-lang', version: '2.5' //commons-lang-2.5.jar
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1' //commons-logging.jar
    compile group: 'org.codehaus.jettison', name: 'jettison', version: '1.3.1'  //jettison.jar
    compile group: 'org.javassist', name: 'javassist', version: '3.15.0-GA' //javassist.jar

    compile group: 'com.github.cycladessoa', name: 'engine', version: 'latest.integration'
    compile group: 'com.github.cycladessoa', name: 'cyclades', version: 'latest.integration', transitive: false
    // Cyclades Engine required dependencies --- NO NOT MODIFIED ---

    // -------------------------------------------------------------------
    // INSERT ANY NEW DEPENDENCIES HERE FOR THIS SPECIFIC NYXLET
    //
    // Use
    // compile ... for Build time compilation
    // newConf ... for Build output packaging
    // -------------------------------------------------------------------

}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

build.dependsOn(copyToLib)

